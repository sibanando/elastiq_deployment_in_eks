name: Python Application CI/CD
on:
  push:
    branches:
      - main
  workflow_dispatch: null
  pull_request:
    branches:
      - main
jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=elastiq_proj -Dsonar.host.url=${{ env.SONAR_HOST_URL
            }} -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.working.directory=./.scannerwork
      - name: Print SonarQube Logs
        run: >
          ls -al .scannerwork

          cat .scannerwork/report-task.txt || echo "report-task.txt not found"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Update kube config
        run: aws eks update-kubeconfig --region us-west-2 --name demo
      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
      - name: Deploy to Prometheus and Grafana
        run: |  
	  helm repo add stable https://charts.helm.sh/stable || true
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
          # Check if namespace 'prometheus' exists
          if kubectl get namespace prometheus > /dev/null 2>&1; then
              # If namespace exists, upgrade the Helm release
              helm upgrade stable prometheus-community/kube-prometheus-stack -n prometheus
          else
              # If namespace does not exist, create it and install Helm release
              kubectl create namespace prometheus
              helm install stable prometheus-community/kube-prometheus-stack -n prometheus
          fi
          kubectl patch svc stable-kube-prometheus-sta-prometheus -n prometheus -p '{"spec": {"type": "LoadBalancer"}}'
          kubectl patch svc stable-grafana -n prometheus -p '{"spec": {"type": "LoadBalancer"}}'
		  
      - name: Deploy to ARGOCD
        run: |  
		      kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
